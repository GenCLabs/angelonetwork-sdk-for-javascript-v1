static_library("cryptopp"){
  #TESTSRCS := adhoc.cpp test.cpp bench1.cpp bench2.cpp bench3.cpp 
  #datatest.cpp dlltest.cpp fipsalgt.cpp 
  #validat0.cpp validat1.cpp validat2.cpp validat3.cpp validat4.cpp 
  #validat5.cpp validat6.cpp validat7.cpp validat8.cpp validat9.cpp 
  #validat10.cpp regtest1.cpp regtest2.cpp regtest3.cpp regtest4.cpp
  sources = [
"src/3way.cpp",
#"src/adhoc.cpp",
"src/adler32.cpp",
"src/algebra.cpp",
"src/algparam.cpp",
"src/arc4.cpp",
"src/aria.cpp",
"src/aria_simd.cpp",
"src/ariatab.cpp",
"src/asn.cpp",
"src/authenc.cpp",
"src/base32.cpp",
"src/base64.cpp",
"src/basecode.cpp",
#"src/bench1.cpp",
#"src/bench2.cpp",
#"src/bench3.cpp",
"src/bfinit.cpp",
"src/blake2b_simd.cpp",
"src/blake2.cpp",
"src/blake2s_simd.cpp",
"src/blowfish.cpp",
"src/blumshub.cpp",
"src/camellia.cpp",
"src/cast.cpp",
"src/casts.cpp",
"src/cbcmac.cpp",
"src/ccm.cpp",
"src/chacha_avx.cpp",
"src/chacha.cpp",
"src/chacha_simd.cpp",
"src/cham.cpp",
"src/cham_simd.cpp",
"src/channels.cpp",
"src/cmac.cpp",
"src/cpu.cpp",
"src/crc.cpp",
"src/crc_simd.cpp",
"src/cryptlib.cpp",
"src/darn.cpp",
#"src/datatest.cpp",
"src/default.cpp",
"src/des.cpp",
"src/dessp.cpp",
"src/dh2.cpp",
"src/dh.cpp",
"src/dll.cpp",
#"src/dlltest.cpp",
"src/donna_32.cpp",
"src/donna_64.cpp",
"src/donna_sse.cpp",
"src/dsa.cpp",
"src/eax.cpp",
"src/ec2n.cpp",
"src/eccrypto.cpp",
"src/ecp.cpp",
"src/elgamal.cpp",
"src/emsa2.cpp",
"src/eprecomp.cpp",
"src/esign.cpp",
"src/files.cpp",
"src/filters.cpp",
"src/fips140.cpp",
#"src/fipsalgt.cpp",
#"src/fipstest.cpp",
"src/gcm.cpp",
"src/gcm_simd.cpp",
"src/gf2_32.cpp",
"src/gf256.cpp",
"src/gf2n.cpp",
"src/gfpcrypt.cpp",
"src/gost.cpp",
"src/gzip.cpp",
"src/hc128.cpp",
"src/hc256.cpp",
"src/hex.cpp",
"src/hight.cpp",
"src/hmac.cpp",
"src/hrtimer.cpp",
"src/ida.cpp",
"src/idea.cpp",
"src/integer.cpp",
"src/iterhash.cpp",
"src/kalyna.cpp",
"src/kalynatab.cpp",
"src/keccakc.cpp",
"src/keccak.cpp",
"src/lea.cpp",
"src/lea_simd.cpp",
"src/luc.cpp",
"src/mars.cpp",
"src/marss.cpp",
"src/md2.cpp",
"src/md4.cpp",
"src/md5.cpp",
"src/misc.cpp",
"src/modes.cpp",
"src/mqueue.cpp",
"src/mqv.cpp",
"src/nbtheory.cpp",
"src/neon_simd.cpp",
"src/oaep.cpp",
"src/osrng.cpp",
"src/padlkrng.cpp",
"src/panama.cpp",
"src/pch.cpp",
"src/pkcspad.cpp",
"src/poly1305.cpp",
"src/polynomi.cpp",
"src/ppc_power7.cpp",
"src/ppc_power8.cpp",
"src/ppc_power9.cpp",
"src/ppc_simd.cpp",
"src/pssr.cpp",
"src/pubkey.cpp",
"src/queue.cpp",
"src/rabbit.cpp",
"src/rabin.cpp",
"src/randpool.cpp",
"src/rc2.cpp",
"src/rc5.cpp",
"src/rc6.cpp",
"src/rdrand.cpp",
"src/rdtables.cpp",
#"src/regtest1.cpp",
#"src/regtest2.cpp",
#"src/regtest3.cpp",
#"src/regtest4.cpp",
"src/rijndael.cpp",
"src/rijndael_simd.cpp",
"src/ripemd.cpp",
"src/rng.cpp",
"src/rsa.cpp",
"src/rw.cpp",
"src/safer.cpp",
"src/salsa.cpp",
"src/scrypt.cpp",
"src/seal.cpp",
"src/seed.cpp",
"src/serpent.cpp",
"src/sha3.cpp",
"src/shacal2.cpp",
"src/shacal2_simd.cpp",
"src/sha.cpp",
"src/sharkbox.cpp",
"src/shark.cpp",
"src/sha_simd.cpp",
"src/simeck.cpp",
"src/simeck_simd.cpp",
"src/simon128_simd.cpp",
"src/simon64_simd.cpp",
"src/simon.cpp",
"src/simple.cpp",
"src/skipjack.cpp",
"src/sm3.cpp",
"src/sm4.cpp",
"src/sm4_simd.cpp",
"src/sosemanuk.cpp",
"src/speck128_simd.cpp",
"src/speck64_simd.cpp",
"src/speck.cpp",
"src/square.cpp",
"src/squaretb.cpp",
"src/sse_simd.cpp",
"src/strciphr.cpp",
"src/tea.cpp",
#"src/test.cpp",
"src/tftables.cpp",
"src/threefish.cpp",
"src/tiger.cpp",
"src/tigertab.cpp",
"src/ttmac.cpp",
"src/tweetnacl.cpp",
"src/twofish.cpp",
#"src/validat0.cpp",
#"src/validat10.cpp",
#"src/validat1.cpp",
#"src/validat2.cpp",
#"src/validat3.cpp",
#"src/validat4.cpp",
#"src/validat5.cpp",
#"src/validat6.cpp",
#"src/validat7.cpp",
#"src/validat8.cpp",
#"src/validat9.cpp",
"src/vmac.cpp",
"src/wake.cpp",
"src/whrlpool.cpp",
"src/xed25519.cpp",
"src/xtr.cpp",
"src/xtrcrypt.cpp",
"src/zdeflate.cpp",
"src/zinflate.cpp",
"src/zlib.cpp",
]
# SSE2_FLAG = -msse2
#     SSE3_FLAG = -msse3
#     SSSE3_FLAG = -mssse3
#     SSE41_FLAG = -msse4.1
#     SSE42_FLAG = -msse4.2
#     CLMUL_FLAG = -mpclmul
#     AESNI_FLAG = -maes
#     AVX_FLAG = -mavx
#     AVX2_FLAG = -mavx2
#     SHANI_FLAG = -msha
  cflags_cc = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-msse4.2", 
  "-mpclmul", "-maes", "-mavx", "-mavx2", "-msha"]
  cflags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-msse4.2", 
  "-mpclmul", "-maes", "-mavx", "-mavx2", "-msha"]
  cflags_c = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-msse4.2", 
  "-mpclmul", "-maes", "-mavx", "-mavx2", "-msha"]
  if (target_os == "mac") {
    defines = ["CRYPTOPP_DISABLE_MIXED_ASM"]
  }
}
